<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Ys的博客</title><link>https://YuShenLiu06.github.io/Ys_blog.github.io</link><description>判天地之美，析万物之理</description><copyright>Ys的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://YuShenLiu06.github.io/Ys_blog.github.io</link></image><lastBuildDate>Sat, 25 Oct 2025 07:52:14 +0000</lastBuildDate><managingEditor>Ys的博客</managingEditor><ttl>60</ttl><webMaster>Ys的博客</webMaster><item><title>XXT</title><link>https://YuShenLiu06.github.io/Ys_blog.github.io/post/XXT.html</link><description># 学习通任务点完成逻辑以及分析(这里仅对任务过程分析)

待办

- [ ] 研究github上可用的代码
- [ ] 尝试给出逻辑

由于作者专业知识不扎实（js编码）在实现过程中大量使用AI导致最后整个项目臃肿至极，可读性差，难以理解，任务点完成逻辑分析后不再进行更新

## AI直接生成项目是不可靠的有如下问题

- 代码臃肿，AI写的代码不能针对环境做精简，为了实现一个功能常常写出大几百行代码
- 任务理解差异，尽管使用了先进的工具和提示词，ai在理解任务的过程中任然有偏差
- **黑盒效应**，由于AI代码量大，且生成迅速，在缺乏对应专业知识的情况下会难以理解代码内容

## 我们应当如何应对

1. 首先要对应过硬知识，在不理解这个专业/行业使用AI的过程中，小型任务尚且可以，但是在面临大型和复杂任务过程中，人也是关键一环
2. 代码也不能纯粹依赖ai，但是小的代码片段，建议，补全AI还是很好用的。</description><guid isPermaLink="true">https://YuShenLiu06.github.io/Ys_blog.github.io/post/XXT.html</guid><pubDate>Fri, 24 Oct 2025 06:45:02 +0000</pubDate></item><item><title>在CentOs中安装MCDR与MCSM</title><link>https://YuShenLiu06.github.io/Ys_blog.github.io/post/zai-CentOs-zhong-an-zhuang-MCDR-yu-MCSM.html</link><description># 在cent os 7.6中安装mcdr和mcsm

## 安装并配置mcsm

在控制台执行这一串指令`sudo su -c 'wget -qO- https://script.mcsmanager.com/setup_cn.sh | bash' `下载mcsm

## 1.下载并配置我的世界服务端（如果你已经有了服务端，则可以忽略）

## 2.下载轩辕镜像到服务器上

使用指令`bash &lt;(wget -qO- https://xuanyuan.cloud/docker.sh)`安装轩辕镜像，并且安装docker

同时去[官网](https://docker.xuanyuan.me/)注册，有条件的可以充7块钱买流量包，也可以直接使用免费的镜像加速

## 3.安装docker镜像

mcdr的docker的image源 `mcdreforged/mcdreforged-corretto:latest`

在你的docker界面上搜索该镜像，然后使用对应的pull指令

&gt; 如果无法连接，去服务器提供商出打开8080端口

## 4. 在mcsm上应用该镜像和初始化mcdr

1. 在mcsm点击新建应用（选不选mc都一样）可以选择压缩包上传服务端压缩包，
2. 在实例中点击应用实例设置
3. 启动命令输入 `mcdreforged init`
4. 容器化-&gt;打开端口25565 
5. 选择我们刚刚pull下来的docker image 
6. 点击运行实例
7. 将服务器主体文件转移进刚刚创建的文件夹server下
8.  `config.yml`配置 `star-command` 为你的启动指令

## 安装完毕，恭喜🎉。</description><guid isPermaLink="true">https://YuShenLiu06.github.io/Ys_blog.github.io/post/zai-CentOs-zhong-an-zhuang-MCDR-yu-MCSM.html</guid><pubDate>Fri, 24 Oct 2025 06:37:03 +0000</pubDate></item><item><title>关于在cent os7.6服务器版本使用mcdr启动我的世界服器 的复盘</title><link>https://YuShenLiu06.github.io/Ys_blog.github.io/post/guan-yu-zai-cent%20os7.6-fu-wu-qi-ban-ben-shi-yong-mcdr-qi-dong-wo-de-shi-jie-fu-qi-%20-de-fu-pan.html</link><description># 使用cent  os7.6搭建我的世界MCDR服务器

 _坐牢是真几把坐牢_

## 过程复盘

### 第一次路径选择

在第一次尝试过程中，跟随着 [粥的博客](https://www.posase.im/posts/56507258/) 尝试构建docker容器下的mcdr服务器但是最后卡在了docker镜像库

**第一次部署（虽然失败的难点）**

- yum镜像部署
- deepseek乱输出镜像源

**解决方法**

- 技术类询问Ai的话，以后优先使用github和csdn的ai询问（使用更加权威的信息，避免信息源污染）

&gt; csdn的AI在使用梯子后会处于不可用状态

### 第二次路径选择

第二次尝试中，我放弃了docker转而使用本地化部署，在这个路径中成功运行了起来，但没有注意到版本问题，在使用插件的时候才发现

**第二次部署（虽然成功但并不完全，导致结果的原因）**

- 在跟随官方文档下载的时候，没有查询本地python版本
- 由于版本差异和官方文档有差异，启动指令不同

**解决方法**

- 以后每个依赖的版本非常重要，在安装前务必清楚，知晓本地版本是一件很重要的事情，并且要知道下载版本是否能达到预期目标

### python升级

在发现是由于python版本的问题后，我开始了尝试python版本升级，但是cent os7.6与2024年停止维护导致我不能直接下载版本，跟随教程下载新版本但又遇到了源代码下载慢，编译器问题，并且后面还导致了环境污染

**遇到的问题**

- 版本缺失，版本停止维护
- 不加考虑的编译导致环境污染
- 源吗下载慢

**解决方法**

- 在使用新系统时，确认是否还在维护
- 操作系统关键时要留有备份，提前考虑会不会影响到整个系统，可以考虑直接装个**miniconda或者uv**这类，系统自带python动不得
- 下载慢考虑镜像，使用上述ai查找镜像源和使用方法

### 最终解决方案（重回路径一）

当时在源码编译平凡报错和编译工具官方源没有符合版本后，选择了打包了python环境的docker路径

**遇到的问题**

- docker仓库镜像源慢

**解决方法**

- 最后使用了[轩辕镜像](https://docker.xuanyuan.me/)并花钱买了流量

## 总结

- 认识到了信息权威的重要性，以后建议不要直接使用deepseek等ai协助排错
- 同时不得过于依赖于AI还是要同时去搜索（docker镜像站来源），同时还是要自主思考
- 时效性很重要

## 提到的网站和使用的软件

- [粥的博客](https://www.posase.im/posts/56507258/) 
- [MCDR](https://mcdreforged.com/zh-CN)
- [Docker](https://www.docker.com/)
- [python](https://www.python.org/)
- [轩辕镜像](https://docker.xuanyuan.me/)

感谢大佬 _Zi_Gao_ 给出的建议

。</description><guid isPermaLink="true">https://YuShenLiu06.github.io/Ys_blog.github.io/post/guan-yu-zai-cent%20os7.6-fu-wu-qi-ban-ben-shi-yong-mcdr-qi-dong-wo-de-shi-jie-fu-qi-%20-de-fu-pan.html</guid><pubDate>Wed, 22 Oct 2025 12:59:01 +0000</pubDate></item></channel></rss>